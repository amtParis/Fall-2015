//
// Assignement : you can use this sketch as a starting point to use your own easing function
// Modify the drawing methods, parameters and create a custom function to make something unique
//
// To define your own easing curve please use the editor of greensock:
// http://www.greensock.com/customease/
// Add more points, change the shape of the curve
// Copy-paste the easing function generated by this online tool

import de.looksgood.ani.*;
import de.looksgood.ani.easing.*;


// Two samples of easing functions
CustomEasing customEasing1 = CustomEasing.create("customEasing1", "[{s:0,cp:0.383,e:0.644},{s:0.644,cp:0.905,e:1.044},{s:1.044,cp:1.183,e:1.012},{s:1.012,cp:0.841,e:1}]");
CustomEasing customEasing2 = CustomEasing.create("myCustomEase2", "[{s:0,cp:-0.153,e:-0.08},{s:-0.08,cp:-0.007,e:0.29199},{s:0.29199,cp:0.591,e:-0.084},{s:-0.084,cp:-0.759,e:0.24},{s:0.24,cp:1.239,e:0.076},{s:0.076,cp:-1.087,e:0.28399},{s:0.28399,cp:1.655,e:0.78},{s:0.78,cp:-0.095,e:1}]");

// The Ani library built-in funtions can be previewed here (with an approaching naming):
// http://hosted.zeh.com.br/tweener/docs/en-us/misc/transitions.html
// Many functions are can be visualized : x axis is time and y axis is change over time
// See correct naming im the Help tab of this sketch, in case you want to also use Ani easing functions

float duration1 = 1.5; // Duration in seconds
float duration2 = 3.5; // Duration in seconds

// x and y to store coordinates
float x; 
float y;

// Rotation and size
float rotation = 0;
float size = 0;

// RGB colors values
float red;
float green;
float blue;


void setup() {
  size(800, 600);
  background(255);

  // Initialize the animation/easing library
  Ani.init(this); 

  // We'll use the center of the rectangle to determine it's position 
  rectMode(CENTER);
  
  // Set the origin to the center of the screen
  x = width/2;
  y = height/2;
  
}


void draw() {
  // Draw something using the current values of the variables which use easing

  // Don't use a stroke
  noStroke();
  // Fill with the current value of red, green, blue with a low opacity (10)
  fill(red, green, blue, 10);

  // Move the "pen" to the x,y coordinates
  translate(x, y); 
  
  // Perform a rotation
  rotate(rotation);
  
  // Draw a rectangle at the current position (x,y) since we used translate(x,y) above)
  rect(0, 0, size, size);
}


void keyPressed() {
  background(255); // When any key is pressed, erase everything
}


// You can map variables' easing to one or more mouse events below
// Try different approachs and see which results you get

void mouseMoved() {
  println("moving"); // Moving cursor without pressing any button

  // Example

  // Set an easing lasting a certain duration, on x and y to the value of mouseX and mouseY (mouse position), using a linear interpolation
  Ani.to(this, duration2, "x", mouseX, Ani.LINEAR);
  Ani.to(this, duration1, "y", mouseY, Ani.QUINT_OUT);

  // Add 1/2 circle rotation to our "rotation" variable using our customEasing function number 2
  Ani.to(this, duration1, "rotation", rotation+PI, customEasing2);

  // Easing lasting "duration2" seconds, from the current red, greeen and blue values to a random value using our curstom easing function
  Ani.to(this, duration2, "red", random(255), customEasing1);
  Ani.to(this, duration2, "green", random(255), customEasing1);
  Ani.to(this, duration2, "blue", random(255), customEasing1);

  // Set the size to 50 and ease it to 0 using our customEasing number 1 formula
  size = 50;
  Ani.to(this, duration2, "size", 0, customEasing1);
}

void mousePressed() {
  println("pressed"); // Mouse button pressed
}

void mouseDragged() {
  println("dragged"); // Mouse dragged (button pressed and cursor moving)
}

void mouseClicked() {
  println("clicked"); // Press and release mouse button without moving the cursor
}

void mouseReleased() {
  println("released"); // Mouse button released
}